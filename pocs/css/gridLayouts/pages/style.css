* {
	box-sizing: border-box;
}

ul {
	padding-left: 1.5rem;
}

body {
	font-family: "Poppins", sans-serif;
	color: #333;
	background-color: snow;
	margin: 0 auto;
	max-width: 1000px;
}

.item {
	padding: 8px;
	background-color: white;
	border: 4px solid tomato;
	border-radius: 6px;
	box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.25);
}

.height-50 {
	height: 50vh;
}

/****************************************/
/* Task 1 : Pancake Stack with CSS Grid */
/****************************************/

.task-1.container {
	display: grid;
	height: 100vh;
	grid-template-rows: auto 1fr auto;
}

/*********************************************************/
/* Task 2 : a simple 12 Column Grid Layout with CSS Grid */
/*********************************************************/

.task-2.container {
	display: grid;
	height: 100vh;

	/* the container is divided into 12 columns and each column takes 2 fractions by default */
	grid-template-columns: repeat(12, 2fr);

	/* add space between the columns */
	column-gap: 12px;

	/* vertical alignment */
	align-items: center;
}

.task-2 .item-1 {
	/* it takes 4 columns with a space of 1 empty column on the left */
	grid-column-start: 2;
	grid-column-end: span 4; /* equivalent to : grid-column-end: 6;  */

	/* shorter notation of the two previous lines : */
	/* grid-column: 2 / span 4; */
}

.task-2 .item-2 {
	/* it takes the last 6 columns of the grid */
	grid-column: 6 / span 6;
}

/*********************************************************************/
/* Task 3.1 : Responsive Layout with and without grid-template-areas */
/*********************************************************************/

.task-3-1.container {
	display: grid;
	height: 100vh;

	grid-template-rows: auto auto 1fr auto auto auto;
 
  grid-column-gap: 24px;
  grid-row-gap: 24px;

  /* shorter notation of the two previous lines : */
  /* gap: 24px; */
}

@media (min-width: 720px) {
	.task-3-1.container {
		/* the container is divided into 12 columns and each column takes 1 fraction by default */
		grid-template-columns: repeat(12, 1fr);
		grid-template-rows: auto auto 1fr auto;
	}

	.task-3-1 .header {
		/* the element starts at the 1rst column and takes space of 12 columns (so, full width of the container !)  */
		grid-column: 1 / span 12;
	}

	.task-3-1 .navigation {
		grid-column: 1 / span 12;
	}

	.task-3-1 .main {
		grid-column: 3 / span 10;
	}

	.task-3-1 .sidebar {
		grid-column: 1 / span 2;
		/* force display on the 3th row like the div ".main" */
		grid-row: 3;
	}

	.task-3-1 .ads {
		grid-column: 1 / span 2;
	}

	.task-3-1 .footer {
		grid-column: 3 / span 10;
	}
}

@media (min-width: 1020px) {
	.task-3-1 .navigation {
		grid-column: 3 / span 8;
	}

	.task-3-1 .main {
		grid-column: 3 / span 8;
	}

	.task-3-1 .sidebar {
		grid-row: 2 / 4;
	}

	.task-3-1 .ads {
		grid-column: 11 / span 2;
		grid-row: 2 / 4;
	}

	.task-3-1 .footer {
		grid-column: 1 / span 12;
	}
}

/*********************************************************************/
/* Task 3.2 : Responsive Layout with and without grid-template-areas */
/*********************************************************************/

.task-3-2.container {
	display: grid;
	height: 100vh;

	grid-template-rows: auto auto 1fr auto auto auto;
	gap: 24px;

	grid-template-areas:
		"header"
		"nav"
		"main"
		"sidebar"
		"ads"
		"footer";
}

.task-3-2 .header {
	grid-area: header;
}

.task-3-2 .navigation {
	grid-area: nav;
}

.task-3-2 .ads {
	grid-area: ads;
}

.task-3-2 .sidebar {
	grid-area: sidebar;
}

.task-3-2 .main {
	grid-area: main;
}

.task-3-2 .footer {
	grid-area: footer;
}

@media (min-width: 720px) {
	.task-3-2.container {
		grid-template-areas:
			"header header header"
			"nav nav nav"
			"sidebar main main"
			"ads footer footer";

		grid-template-rows: auto auto 1fr auto;
	}
}

@media (min-width: 1020px) {
	.task-3-2.container {
		grid-template-areas:
			"header header header header"
			"sidebar nav nav ads"
			"sidebar main main ads"
			"footer footer footer footer";

		grid-template-rows: auto auto 1fr auto;
	}
}

/****************************************************************/
/* Task 4 : Responsive Layout Without Media Queries in CSS Grid */
/****************************************************************/

.task-4.container {
	display: grid;
	gap: 24px;

	grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
}

.task-4 .item-5 {
	grid-column-end: span 2;
}

/*********************************************/
/* Task 5 : 12 x 12 Chess Grid with CSS Grid */
/*********************************************/

.task-5.container {
	display: grid;
	height: 100vh;

	grid-template-columns: repeat(12, 1fr);
	grid-template-rows: repeat(12, 1fr);
}

.task-5 .item-1 {
	grid-row: 1 / span 3;
	grid-column: 1 / span 3;
}

.task-5 .item-2 {
	grid-row: 4 / span 3;
	grid-column: 4 / span 3;
}

.task-5 .item-3 {
	grid-row: 7 / span 3;
	grid-column: 7 / span 3;
}

.task-5 .item-4 {
	grid-row: 10 / span 3;
	grid-column: 10 / span 3;
}
